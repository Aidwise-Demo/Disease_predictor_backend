name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main  # Deploy only when code is pushed to the main branch

jobs:
  Deploy_to_VPS:
    runs-on: ubuntu-latest
    env:
      VPS_DIRECTORY_AIDWISE_DEMO: ${{ secrets.VPS_DIRECTORY_AIDWISE_DEMO }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.9.13'  # Specify the Python version you need

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
      env:
        SSH_PRIVATE_KEY: |
          -----BEGIN OPENSSH PRIVATE KEY-----
          ${{ secrets.SSH_PRIVATE_KEY_AIDWISE_DEMO }}
          -----END OPENSSH PRIVATE KEY-----
    
    - name: Deploy Code to VPS
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME_AIDWISE_DEMO }}@${{ secrets.VPS_IPADDRESS_AIDWISE_DEMO }} << 'EOF'
          # Check if the directory exists, remove it if necessary, and recreate
          if [ -d "${{ env.VPS_DIRECTORY_AIDWISE_DEMO }}" ]; then
            echo "Removing existing disease-predictor directory..."
            rm -rf ${{ env.VPS_DIRECTORY_AIDWISE_DEMO }}
          fi
          echo "Creating disease-predictor directory..."
          mkdir -p ${{ env.VPS_DIRECTORY_AIDWISE_DEMO }}
        EOF
        rsync -avz --exclude='.git' ./ ${{ secrets.VPS_USERNAME_AIDWISE_DEMO }}@${{ secrets.VPS_IPADDRESS_AIDWISE_DEMO }}:${{ env.VPS_DIRECTORY_AIDWISE_DEMO }}/

    - name: Set up Python Virtual Environment on VPS
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME_AIDWISE_DEMO }}@${{ secrets.VPS_IPADDRESS_AIDWISE_DEMO }} << 'EOF'
          cd ${{ env.VPS_DIRECTORY_AIDWISE_DEMO }}
          sudo apt-get update
          sudo apt-get install -y python3-venv python3-pip
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
        EOF

    - name: Build and Run Docker Container on VPS
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME_AIDWISE_DEMO }}@${{ secrets.VPS_IPADDRESS_AIDWISE_DEMO }} << 'EOF'
          cd ${{ env.VPS_DIRECTORY_AIDWISE_DEMO }}
          
          # Set environment variables securely using GitHub Secrets
          echo "VPS_EXPOSED_PORT_AIDWISE_DEMO=${{ secrets.VPS_EXPOSED_PORT_AIDWISE_DEMO }}" >> .env
          echo "VPS_DIRECTORY_AIDWISE_DEMO=${{ env.VPS_DIRECTORY_AIDWISE_DEMO }}" >> .env

          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Stop running containers and clean up unused images
          docker-compose down || { echo 'Docker Compose down failed'; exit 1; }
          docker image prune -f  # Clean up unused images
          
          # Build and start Docker container
          docker-compose --env-file .env up --build -d || { echo 'Docker Compose up failed'; exit 1; }
          
          # Wait and check container status
          sleep 4
          if ! docker ps | grep -q "disease-predictor"; then
            echo "Container failed to start or exited unexpectedly."
            docker-compose logs
            exit 1
          fi
          
          # Get the IP and Port of the running container
          echo "The container is running!"
          echo "The Docker container can be accessed on port 8000."
        EOF
